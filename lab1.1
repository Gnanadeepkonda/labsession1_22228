{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3d53e520",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter any stringanilkumar\n",
      "vowels in string 4\n",
      "consonants in string 5\n"
     ]
    }
   ],
   "source": [
    "def count(input_string):\n",
    "    vowels=\"aeiou\"\n",
    "    vowels_count=0\n",
    "    conso_count=0\n",
    "    \n",
    "    for char in input_string.lower():\n",
    "        if char.isalpha():\n",
    "            if char in vowels:\n",
    "                vowels_count+= 1\n",
    "            else:\n",
    "                conso_count+= 1\n",
    "                \n",
    "                \n",
    "                \n",
    "    return vowels_count, conso_count    \n",
    "\n",
    "def main():\n",
    "    input_string = input( \"Enter any string\" )\n",
    "    vowels_count,consos_count=count(input_string)\n",
    "    print(f\"vowels in string {vowels_count}\")\n",
    "    print(f\"consonants in string {consos_count}\")\n",
    "    \n",
    "if __name__ == \"__main__\":\n",
    "     main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "63a199cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def common(list1, list2):\n",
    "    \"\"\"\n",
    "    Returns the number of common elements between two lists.\n",
    "    \n",
    "    Parameters:\n",
    "    list1 (list): The first list.\n",
    "    list2 (list): The second list.\n",
    "    \n",
    "    Returns:\n",
    "    int: The number of common elements.\n",
    "    \"\"\"\n",
    "    return len(set(list1) & set(list2))\n",
    "\n",
    "def main():\n",
    "    # Get user input for the two lists\n",
    "    list1 = input(\"Enter the first list (space-separated numbers): \")\n",
    "    list1 = [int(x) for x in list1.split()]\n",
    "    \n",
    "    list2 = input(\"Enter the second list (space-separated numbers): \")\n",
    "    list2 = [int(x) for x in list2.split()]\n",
    "    \n",
    "    # Find and print the number of common elements\n",
    "    num_common = common(list1, list2)\n",
    "    print(f\"Number of common elements: {num_common}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a588cef9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def invert_matrix(A):\n",
    "    # Make copies of A & I, AM & IM, to use for row ops\n",
    "    n = len(A)\n",
    "    I = [[j for j in range(n)] for i in range(n)]\n",
    "    for i in range(n):\n",
    "        I[i][i] = 1\n",
    "    AM = copy_matrix(A)\n",
    "    IM = copy_matrix(I)\n",
    "\n",
    "    # Perform row operations\n",
    "    indices = list(range(n))\n",
    "    for fd in range(n):  # fd stands for focus diagonal\n",
    "        fdScaler = 1.0 / AM[fd][fd]\n",
    "        # FIRST: scale fd row with fd inverse.\n",
    "        for j in range(n):  # Use j to indicate column looping.\n",
    "            AM[fd][j] *= fdScaler\n",
    "            IM[fd][j] *= fdScaler\n",
    "        # SECOND: operate on all rows except fd row as follows:\n",
    "        for i in indices[0:fd] + indices[fd+1:]:\n",
    "            # *** skip row with fd in it.\n",
    "            crScaler = AM[i][fd]  # cr stands for \"current row\".\n",
    "            for j in range(n):\n",
    "                # cr - crScaler * fdRow, but one element at a time.\n",
    "                AM[i][j] = AM[i][j] - crScaler * AM[fd][j]\n",
    "                IM[i][j] = IM[i][j] - crScaler * IM[fd][j]\n",
    "\n",
    "    return IM\n",
    "\n",
    "def copy_matrix(M):\n",
    "    return [row[:] for row in M]\n",
    "\n",
    "def get_matrix_from_user():\n",
    "    n = int(input(\"Enter the size of the matrix (e.g. 3 for a 3x3 matrix): \"))\n",
    "    A = []\n",
    "    for i in range(n):\n",
    "        row = []\n",
    "        for j in range(n):\n",
    "            row.append(float(input(f\"Enter element [{i+1}][{j+1}]: \")))\n",
    "        A.append(row)\n",
    "    return A\n",
    "\n",
    "def main():\n",
    "    A = get_matrix_from_user()\n",
    "    ainv = invert_matrix(A)\n",
    "    print(\"Inverse of the matrix:\")\n",
    "    for row in ainv:\n",
    "        print(row)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "761430bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "def input_matrix(rows, cols):\n",
    "    matrix = []\n",
    "    print(f\"Enter the elements of the matrix ({rows}x{cols}):\")\n",
    "    for i in range(rows):\n",
    "        row = list(map(int, input(f\"Row {i + 1}: \").split()))\n",
    "        if len(row) != cols:\n",
    "            print(f\"Error: Expected {cols} elements, but got {len(row)}.\")\n",
    "            return None\n",
    "        matrix.append(row)\n",
    "    return matrix\n",
    "\n",
    "def multiply_matrices(a, b):\n",
    "    if len(a[0]) != len(b):\n",
    "        return None\n",
    "\n",
    "    result = [[0 for _ in range(len(b[0]))] for _ in range(len(a))]\n",
    "    \n",
    "    for i in range(len(a)):\n",
    "        for j in range(len(b[0])):\n",
    "            for k in range(len(b)):\n",
    "                result[i][j] += a[i][k] * b[k][j]\n",
    "    \n",
    "    return result\n",
    "\n",
    "def print_matrix(matrix):\n",
    "    for row in matrix:\n",
    "        print(\" \".join(map(str, row)))\n",
    "\n",
    "rows_a = int(input(\"Enter the number of rows for matrix A: \"))\n",
    "cols_a = int(input(\"Enter the number of columns for matrix A: \"))\n",
    "matrix_a = input_matrix(rows_a, cols_a)\n",
    "\n",
    "rows_b = int(input(\"Enter the number of rows for matrix B: \"))\n",
    "cols_b = int(input(\"Enter the number of columns for matrix B: \"))\n",
    "matrix_b = input_matrix(rows_b, cols_b)\n",
    "\n",
    "if matrix_a is None or matrix_b is None:\n",
    "    print(\"Error in matrix input.\")\n",
    "else:\n",
    "    product = multiply_matrices(matrix_a, matrix_b)\n",
    "    \n",
    "    if product is None:\n",
    "        print(\"Error: Matrices are not multiplicable.\")\n",
    "    else:\n",
    "        print(\"Product of matrices A and B:\")\n",
    "        print_matrix(product)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
